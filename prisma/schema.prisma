generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id            BigInt          @id
  checkin       DateTime        @db.Date
  description   String?         @db.VarChar(150)
  status        String          @db.VarChar(10)
  total_price   Int
  tourist_id    Int
  checkout      DateTime        @db.Date
  Book_activity Book_activity[]
  Book_package  Book_package[]
  Book_room     Book_room[]
  tourist_info  Tourist_info    @relation(fields: [tourist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tourist_id")
}

model Activity {
  id             Int             @id(map: "activity_pkey") @default(autoincrement())
  name           String
  price          Int             @db.SmallInt
  discount_price Int             @db.SmallInt
  picture        String[]
  per_person     Int             @db.SmallInt
  service_time   String
  Book_activity  Book_activity[]
  Package        Package[]
}

model Book_activity {
  book_id     BigInt
  activity_id Int
  status      String   @db.VarChar(10)
  id          Int      @id @default(autoincrement())
  Activity    Activity @relation(fields: [activity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_activity_activity")
  Booking     Booking  @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_activity_book")
}

model Book_room {
  book_id      BigInt
  status       String    @db.VarChar(10)
  room_type_id Int
  id           Int       @id @default(autoincrement())
  Booking      Booking   @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_room_book")
  Room_type    Room_type @relation(fields: [room_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_room_room")
}

model Room_type {
  id            Int         @id(map: "room_type_pkey") @default(autoincrement())
  name          String      @db.VarChar(15)
  price         Int         @db.SmallInt
  twin_bed      Int?        @db.SmallInt
  double_bed    Int?        @db.SmallInt
  description   String
  picture       String[]
  swimming_pool Boolean
  bath_tub      Boolean
  Book_room     Book_room[]
  Package       Package[]
}

model Tourist_info {
  id             Int       @id(map: "tourist_info_pkey") @default(autoincrement())
  first_name     String    @db.VarChar(50)
  last_name      String    @db.VarChar(50)
  email          String    @db.VarChar(50)
  phone_number   String    @db.VarChar(10)
  phone_number_2 String?   @db.VarChar(10)
  for_other      Boolean
  country        String
  Booking        Booking[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  email    String @unique
}

model Package {
  id           Int            @id @default(autoincrement())
  price        Int            @db.SmallInt
  picture      String[]
  description  String
  room_type    Int
  activity     Int
  Book_package Book_package[]
  Activity     Activity       @relation(fields: [activity], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "package_activity")
  Room_type    Room_type      @relation(fields: [room_type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_type_package")
}

model Book_package {
  book_id    BigInt
  package_id Int
  status     String  @db.VarChar(10)
  id         Int     @id @default(autoincrement())
  Booking    Booking @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_package_book")
  Package    Package @relation(fields: [package_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_package_package")
}
